DLL - Dynamic Link Library
Библиотеки динамической компановки
Улучшают вопросы с авторским правом и лицензированием ПО.

Библиотека - набор функций в виде отдельного файла/модуля
Модуль - примерно тоже самое, что и библиотека. 
- Объект уровня проекта, теоретически может состоять из нескольких файлов
		 и представляют собой библиотеку.

Компановка (Link) - подключение библиотеки - получение доступа к её функциям.
Существует:
	- статическая компановка - подключение функций в исходный код (текст программы)
	- динамическая компановка - в исполнимый код (во время выполнения)

_________________________________________________________________________________________

Статическая:
	код более "самостоятелен" - не нужны доп. файлы для работы 
	код больше, за счет включения доп. функций, причем "оптом" - всю библиотеку, независимо от кол-ва использованных функций
	== хорошо для готовой продукции, которая исполняется в разных ПК
Динамическая:
	код зависит от доп. файлов, при копировании/переносе их нужно не забыть
	код вызывает функции из другого файла, сам при этом короче
	== хорошо для распределенных программ (с приложениями/обновлениями)
	+ немного лучше защита авторских прав - сложнее переделать
	+ совместимость между языками программирования

Для иллюстрации работы с DLL необходимы 2 проекта:
	1. DLL - продуктом будет .dll файл
	2. WinAPI/Console (любой другой) - сюда надо скопировать или указать путь к .dll файлу, созданному в проекте 1.


1: Экспортируемые функции оформляются в блоке extern "C"{ ... } 
	В прототипе функции используется декларация
		__declspec(dllexport)
	Главная ф-ция (DllMain) возвращает 1 (TRUE)

2: Библиотека подключается командой
		HMODULE dll = LoadLibraryW(L"library.dll");
		после чего нужно проверить на NULL
   Для запуска функции извлекается указатель на неё, 
   с этой целью удобно определить тип нужного ф. указателя
		typedef long (*sqr_type)(long);   
		sqr_type sqr_fun; 
   Указатель из модуля (библиотеки) извлекается функцией GetProcAddress(). Псле извлечения его нужно типизировать
		sqr_fun = (sqr_type)GetProcAddress(dll, "Sqr");
   Далее переменной sqr_fun можно пользоваться как обычной функцией